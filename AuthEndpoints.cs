using System.Security.Claims;using Dapper;using Microsoft.AspNetCore.Authentication;using Microsoft.IdentityModel.Tokens;using System.IdentityModel.Tokens.Jwt;using System.Text;public static class AuthEndpoints{    public static void MapAuthEndpoints(this WebApplication app)    {        app.MapPost("/register", async (UserDto userDto, DapperContext dbContext) =>        {            using var connection = dbContext.CreateConnection();            var existingUser = await connection.QuerySingleOrDefaultAsync<User>("SELECT * FROM \"Users\" WHERE \"Email\" = @Email", new { userDto.Email });            if (existingUser != null)            {                return Results.Conflict("User with this email already exists.");            }            var user = new User            {                Email = userDto.Email,                PasswordHash = BCrypt.Net.BCrypt.HashPassword(userDto.Password),                FullName = userDto.FullName            };            await connection.ExecuteAsync("INSERT INTO \"Users\" (\"Id\", \"Email\", \"PasswordHash\", \"FullName\", \"CreatedAt\") VALUES (@Id, @Email, @PasswordHash, @FullName, @CreatedAt)", user);            return Results.Ok(new { message = "User registered successfully" });        });        app.MapPost("/login", async (UserDto userDto, DapperContext dbContext, IConfiguration config) =>        {            using var connection = dbContext.CreateConnection();            var user = await connection.QuerySingleOrDefaultAsync<User>("SELECT * FROM \"Users\" WHERE \"Email\" = @Email", new { userDto.Email });            if (user == null || !BCrypt.Net.BCrypt.Verify(userDto.Password, user.PasswordHash))            {                return Results.Unauthorized();            }            var token = GenerateJwtToken(user, config);            return Results.Ok(new { token });        });        app.MapGet("/account/login-google", (string returnUrl = "/") =>        {            var props = new AuthenticationProperties { RedirectUri = $"/account/google-callback?returnUrl={returnUrl}" };            return Results.Challenge(props, new[] { "Google" });        });        app.MapGet("/account/google-callback", async (HttpContext httpContext, DapperContext dbContext, IConfiguration config) =>        {            var authenticateResult = await httpContext.AuthenticateAsync("Google");            if (!authenticateResult.Succeeded)            {                return Results.Unauthorized();            }            var email = authenticateResult.Principal.FindFirstValue(ClaimTypes.Email);            var googleId = authenticateResult.Principal.FindFirstValue(ClaimTypes.NameIdentifier);            var fullName = authenticateResult.Principal.FindFirstValue(ClaimTypes.Name);            using var connection = dbContext.CreateConnection();            var user = await connection.QuerySingleOrDefaultAsync<User>("SELECT * FROM \"Users\" WHERE \"Email\" = @Email", new { Email = email });            if (user == null)            {                user = new User                {                    Email = email,                    GoogleId = googleId,                    FullName = fullName                };                await connection.ExecuteAsync("INSERT INTO \"Users\" (\"Id\", \"Email\", \"GoogleId\", \"FullName\", \"CreatedAt\") VALUES (@Id, @Email, @GoogleId, @FullName, @CreatedAt)", user);            }            var token = GenerateJwtToken(user, config);            return Results.Ok(new { token });        });        app.MapGet("/me", (ClaimsPrincipal principal) =>        {            var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);            var email = principal.FindFirstValue(ClaimTypes.Email);            var fullName = principal.FindFirstValue(ClaimTypes.Name);            return Results.Ok(new { userId, email, fullName });        }).RequireAuthorization();    }    private static string GenerateJwtToken(User user, IConfiguration config)    {        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config["Jwt:Key"]));        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);        var claims = new[]        {            new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),            new Claim(JwtRegisteredClaimNames.Email, user.Email),            new Claim(JwtRegisteredClaimNames.Name, user.FullName ?? string.Empty),            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())        };        var token = new JwtSecurityToken(            issuer: config["Jwt:Issuer"],            audience: config["Jwt:Audience"],            claims: claims,            expires: DateTime.Now.AddMinutes(120),            signingCredentials: credentials);        return new JwtSecurityTokenHandler().WriteToken(token);    }}public record UserDto(string Email, string Password, string? FullName);