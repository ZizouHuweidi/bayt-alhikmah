// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
        title,
        author,
        description,
        thumbnail_url
    )
VALUES ($1, $2, $3, $4)
RETURNING id, title, author, description, thumbnail_url, created_at, updated_at
`

type CreateBookParams struct {
	Title        string         `json:"title"`
	Author       string         `json:"author"`
	Description  sql.NullString `json:"description"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.queryRow(ctx, q.createBookStmt, createBook,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.ThumbnailUrl,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.ThumbnailUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteBookStmt, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, description, thumbnail_url, created_at, updated_at
FROM books
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.queryRow(ctx, q.getBookStmt, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.ThumbnailUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, description, thumbnail_url, created_at, updated_at
FROM books
WHERE (
        $1::text = ''
        OR title ILIKE '%' || $1 || '%'
    )
ORDER BY created_at DESC
`

func (q *Queries) ListBooks(ctx context.Context, dollar_1 string) ([]Book, error) {
	rows, err := q.query(ctx, q.listBooksStmt, listBooks, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.ThumbnailUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET title = COALESCE($2, title),
    author = COALESCE($3, author),
    description = COALESCE($4, description),
    thumbnail_url = COALESCE($5, thumbnail_url),
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, author, description, thumbnail_url, created_at, updated_at
`

type UpdateBookParams struct {
	ID           int32          `json:"id"`
	Title        string         `json:"title"`
	Author       string         `json:"author"`
	Description  sql.NullString `json:"description"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.queryRow(ctx, q.updateBookStmt, updateBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.ThumbnailUrl,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.ThumbnailUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
